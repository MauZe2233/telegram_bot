from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from handlers.menu import Menu
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import re
import time

router = Router()



class Request(StatesGroup):
    request_loc = State()
    request_info = State()
    profile = State()
    request_photo = State()
    edit_fio = State()
    edit_phone = State()

@router.message(Menu.menu, F.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message, bot : Bot, state:FSMContext):
    u_id = message.from_user.id
    await state.clear()
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    cur.execute(
        "SELECT * FROM users WHERE tg LIKE '%s'" % (u_id)
        )
    profile = cur.fetchall()
    cur.execute(
        "SELECT * FROM requests WHERE tg LIKE '%s'" % (u_id)
        )
    req = cur.fetchall()
    for el in profile:
        info = f'–§–ò–û: {el[1]}\n –¢–µ–ª–µ—Ñ–æ–Ω: {el[2]}\n –ó–∞—è–≤–æ–∫: {len(req)}'
    conn.commit()
    cur.close()
    conn.close()
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
            [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await bot.send_message(chat_id=u_id, text = info, reply_markup=keyboard)
    if(F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'): await state.set_state(Request.profile)
    elif(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"): await state.set_state(Menu.wait)

@router.message(Request.profile, F.text.lower() == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def edit_profile(message: types.Message, state:FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
    await state.set_state(Request.edit_fio)


@router.message(Request.edit_fio, F.text)
async def edit_profile(message: types.Message, state:FSMContext):
    await state.update_data(fio=message.text)
    await message.answer("üì± –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π).",
    reply_markup=types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True
        ))
    await state.set_state(Request.edit_phone)

@router.message(Request.edit_phone)
async def get_phone(message: types.Message, state: FSMContext, bot: Bot):
    u_id = message.from_user.id
    if message.contact:  
        phone = message.contact.phone_number
        result = re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$', phone)
    else:
        phone = message.text
        result = re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$', phone)

    if(not bool(result)):
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        get_phone()
        return 0
    
    await state.update_data(phone=phone)
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    data = await state.get_data()
    cur.execute(
        "UPDATE users SET name = '%s', phone = '%s' WHERE tg LIKE '%s'" % (data["fio"], data["phone"], u_id)
        )
    conn.commit()
    cur.close()
    conn.close()
    await show_profile(message, bot, state)



@router.callback_query(Request.request_loc, lambda c: c.data)
async def process_callback_button1(callback_query: types.CallbackQuery, bot : Bot, state:FSMContext):
    await callback_query.message.delete()
    u_id = callback_query.from_user.id
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    cur.execute(
        'CREATE TABLE IF NOT EXISTS requests (id INTEGER PRIMARY KEY AUTOINCREMENT, name varchar(50), phone varchar(50), tg int(255), text varchar(1000), photo BLOB(1), status varchar(50), zone varchar(50))'
        )
    conn.commit()
    cur.close()
    conn.close()
    
    await bot.send_message(chat_id=u_id, text = "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É", reply_markup=types.ReplyKeyboardRemove())
    await state.update_data(zone=callback_query.data)
    await state.set_state(Request.request_info)



@router.message(Menu.menu, F.text.lower() == "–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def ans2(message: types.Message, state:FSMContext, bot: Bot):
    
    inline_kb_full = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–ì–∞–≥–∞—Ä–∏–Ω—Å–∫–∏–π', callback_data='–ì–∞–≥–∞—Ä–∏–Ω—Å–∫–∏–π'),
            InlineKeyboardButton(text='–õ–µ–Ω–∏–Ω—Å–∫–∏–π', callback_data='–õ–µ–Ω–∏–Ω—Å–∫–∏–π')
        ]
    ])
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω", reply_markup=inline_kb_full)
    await state.set_state(Request.request_loc)


@router.message(Request.request_info, F.text)
async def info(message: types.Message, state: FSMContext):
    await state.update_data(request=message.text)
    await message.delete()

    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã")
    await state.set_state(Request.request_photo)

    
    
@router.message(Menu.menu, F.text.lower() == "–º–æ–∏ –∑–∞—è–≤–∫–∏")
async def ans2(message: types.Message, state: FSMContext, bot: Bot):
    u_id = message.from_user.id
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    cur.execute(
        "SELECT * FROM requests WHERE tg LIKE '%s'" % (u_id)
        )
    my_reqs = cur.fetchall()
    for el in my_reqs:
        info = f'{el[4]}\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {el[6]}'
        await bot.send_photo(chat_id=u_id, photo=el[5])
        await message.answer(info)
        time.sleep(0.5)

    cur.close()
    conn.close()

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∂–º–∏—Ç–µ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'", reply_markup=keyboard)
    if(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        await state.set_state(Menu.wait)

@router.message(Request.request_photo, F.photo)
async def get_photo(message: types.Message, state: FSMContext):

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ)
        photo = message.photo[-1]
        u_id = message.from_user.id
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await message.bot.get_file(photo.file_id)
        file_bytes = await message.bot.download_file(file.file_path)
        await message.delete()
        
        
        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å file_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        photo_file_id = photo.file_id
        await state.update_data(photo_file_id=photo_file_id)
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")

    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    
    cur.execute(
        "SELECT * FROM users WHERE tg LIKE '%s'" % (u_id)
        )
    list = cur.fetchall()
    data = await state.get_data()
    for el in list:
        cur.execute(
            "INSERT INTO requests (name, phone, tg, text, photo, status, zone) VALUES ('%s', '%s' ,'%s', '%s', '%s', '–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è', '%s')" % (el[1], el[2], el[3], data["request"], data["photo_file_id"], data["zone"])
        )
    
    
    conn.commit()

    cur.close()
    conn.close()

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É", reply_markup=keyboard)

    await state.set_state(Menu.wait)

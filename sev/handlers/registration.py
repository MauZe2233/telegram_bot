from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from handlers.menu import Menu
import sqlite3
import re

router = Router()
global u_id
class Registration(StatesGroup):
    fio = State()
    phone = State()
    agreed = State()
    done = State()

#–ù–∞—á–∞–ª–æ
@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    u_id = message.from_user.id

    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()

    cur.execute(
        'CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(50), phone varchar(50), tg int(255))'
    )
    conn.commit()
    cur.execute(
        "SELECT tg FROM users" 
    )
    tg = cur.fetchall()
    # –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–∏–≤–ª—å–Ω–æ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for el in tg:
        if (u_id == el[0]):
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã!")
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )
            await message.answer("–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –æ–ø—Ü–∏–∏ - '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'", reply_markup=keyboard)        
            await state.set_state(Menu.wait)
            return 0
        
    cur.close()
    conn.close()

    await message.answer('–ü—Ä–∏–≤–µ—Ç, —Å–µ–π—á–∞—Å —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º!')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
    await state.set_state(Registration.fio)

#–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(Registration.fio)
async def get_fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await message.answer("üì± –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π).",
                         reply_markup=types.ReplyKeyboardMarkup(
                             keyboard=[[types.KeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]],
                             resize_keyboard=True
                         ))
    await state.set_state(Registration.phone)

@router.message(Registration.phone)
async def get_phone(message: types.Message, state: FSMContext):

    if message.contact:  
        phone = message.contact.phone_number
        result = re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$', phone)
    else:
        phone = message.text
        result = re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$', phone)

    if(not bool(result)):
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        get_phone()
        return 0
       
    await state.update_data(phone=phone)

    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å)", 
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="–°–æ–≥–ª–∞—Å–µ–Ω")]],
            resize_keyboard=True
        )
    )
    await state.set_state(Registration.agreed)

@router.message(Registration.agreed, F.text.lower() == "—Å–æ–≥–ª–∞—Å–µ–Ω")
async def agreed(message: types.Message, state: FSMContext):
    await state.update_data(tg_id = message.from_user.id)
    data = await state.get_data()
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()

    cur.execute(
        "INSERT INTO users (name, phone, tg) VALUES ('%s', '%s' ,'%s')" % (data["fio"], data["phone"], data["tg_id"])
        )
    conn.commit()
    cur.close()
    conn.close()
    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüë§ –§–ò–û: {data['fio']}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}",
        reply_markup=types.ReplyKeyboardRemove()
    )
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {data['fio']}! ", reply_markup=keyboard)
    await state.set_state(Registration.done)
    await state.set_state(Menu.wait)

    


